'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from '@/components/ui/dialog';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table';
import { FileUploader } from '@/components/file-uploader';
import { Upload, Trash2, RefreshCw } from 'lucide-react';
import { getClerkTokenFromClientCookie } from '@/lib/auth-utils';

const FILE_CATEGORIES = [
  { value: 'general_info', label: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
  { value: 'service_catalog', label: '–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥' },
  { value: 'dialog_management', label: '–í–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞' },
  { value: 'client_work', label: '–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º' }
];

interface FileItem {
  id: number;
  name: string;
  size: number;
  category: string;
  description?: string;
  is_public: boolean;
  created_at: string;
}

interface FunnelFilesManagerProps {
  backendOrgId: string;
  funnelId: string | number;
  isKnowledgeBaseEnabled: boolean;
}

export function FunnelFilesManager({
  backendOrgId,
  funnelId,
  isKnowledgeBaseEnabled
}: FunnelFilesManagerProps) {
  console.log('üéØ FunnelFilesManager COMPONENT RENDERED!');
  console.log('FunnelFilesManager props:', {
    backendOrgId,
    funnelId,
    isKnowledgeBaseEnabled
  });

  const [files, setFiles] = useState<FileItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [uploadModalOpen, setUploadModalOpen] = useState(false);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [selectedFileId, setSelectedFileId] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const [uploadForm, setUploadForm] = useState({
    file: null as File | null,
    description: '',
    category: '',
    is_public: false
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (backendOrgId && funnelId) {
      fetchFiles();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [backendOrgId, funnelId]);

  const fetchFiles = async () => {
    setLoading(true);
    setError(null);

    try {
      const token = getClerkTokenFromClientCookie();
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('Fetching files for funnel:', { backendOrgId, funnelId });

      const response = await fetch(
        `/api/organization/${backendOrgId}/funnels/${funnelId}/files`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log('Fetch files response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
      }

      const data = await response.json();
      setFiles(data.files || []);
    } catch (err) {
      console.error('Error fetching files:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenUploadModal = () => {
    setUploadForm({
      file: null,
      description: '',
      category: '',
      is_public: false
    });
    setUploadModalOpen(true);
  };

  const handleUploadFile = async () => {
    if (!uploadForm.file) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    setLoading(true);
    setError(null);
    setSuccessMessage(null);
    setUploadModalOpen(false);

    try {
      const token = getClerkTokenFromClientCookie();
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const formData = new FormData();
      formData.append('file', uploadForm.file);
      if (uploadForm.description) {
        formData.append('description', uploadForm.description);
      }
      if (uploadForm.category) {
        formData.append('category', uploadForm.category);
      }
      formData.append('is_public', uploadForm.is_public.toString());

      const response = await fetch(
        `/api/organization/${backendOrgId}/funnels/${funnelId}/files`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`
          },
          body: formData
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }

      setSuccessMessage('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      setTimeout(() => setSuccessMessage(null), 3000);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      await fetchFiles();
    } catch (err) {
      console.error('Error uploading file:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenDeleteModal = (fileId: string) => {
    setSelectedFileId(fileId);
    setDeleteModalOpen(true);
  };

  const handleDeleteFile = async () => {
    if (!selectedFileId) return;

    setLoading(true);
    setError(null);
    setSuccessMessage(null);
    setDeleteModalOpen(false);

    try {
      const token = getClerkTokenFromClientCookie();
      if (!token) {
        setError('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const response = await fetch(
        `/api/organization/${backendOrgId}/funnels/${funnelId}/files/${selectedFileId}`,
        {
          method: 'DELETE',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
      }

      setSuccessMessage('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      setTimeout(() => setSuccessMessage(null), 3000);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
      await fetchFiles();
    } catch (err) {
      console.error('Error deleting file:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    } finally {
      setLoading(false);
      setSelectedFileId('');
    }
  };

  const formatFileSize = (bytes: number): string => {
    return `${bytes} Bytes`;
  };

  const getCategoryLabel = (value: string): string => {
    const category = FILE_CATEGORIES.find((cat) => cat.value === value);
    return category ? category.label : value;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const missingData = [];
  if (!isKnowledgeBaseEnabled) missingData.push('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  if (!backendOrgId) missingData.push('ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (backendOrgId)');
  if (!funnelId) missingData.push('ID –≤–æ—Ä–æ–Ω–∫–∏ (funnelId)');

  const isFullyEnabled = missingData.length === 0;

  return (
    <>
      {/* –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */}
      <div className='mt-6 bg-green-500 p-2 text-center font-bold text-white'>
        ‚úÖ –ö–û–ú–ü–û–ù–ï–ù–¢ FUNNEL FILES MANAGER –ó–ê–ì–†–£–ñ–ï–ù!
      </div>

      <Card className='mt-6 h-fit'>
        <CardHeader>
          <div className='flex items-center justify-between'>
            <div>
              <CardTitle>–§–∞–π–ª—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</CardTitle>
              <p className='text-muted-foreground mt-1 text-sm'>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —ç—Ç–æ–π –≤–æ—Ä–æ–Ω–∫–∏
              </p>
            </div>
            <Button
              onClick={fetchFiles}
              variant='outline'
              size='icon'
              disabled={loading || !isFullyEnabled}
            >
              <RefreshCw
                className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`}
              />
            </Button>
          </div>
        </CardHeader>
        <CardContent className='space-y-4'>
          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
          {!isFullyEnabled && (
            <div
              className={`rounded-lg border p-4 ${
                !isKnowledgeBaseEnabled
                  ? 'border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-900/20'
                  : 'border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-900/20'
              }`}
            >
              <h4
                className={`mb-2 text-sm font-semibold ${
                  !isKnowledgeBaseEnabled
                    ? 'text-gray-800 dark:text-gray-200'
                    : 'text-yellow-800 dark:text-yellow-200'
                }`}
              >
                {!isKnowledgeBaseEnabled
                  ? 'üîí –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
                  : '‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ'}
              </h4>
              <ul
                className={`list-inside list-disc space-y-1 text-sm ${
                  !isKnowledgeBaseEnabled
                    ? 'text-gray-700 dark:text-gray-300'
                    : 'text-yellow-700 dark:text-yellow-300'
                }`}
              >
                {missingData.map((item, index) => (
                  <li key={index}>{item}</li>
                ))}
              </ul>
              <div
                className={`mt-3 text-xs ${
                  !isKnowledgeBaseEnabled
                    ? 'text-gray-600 dark:text-gray-400'
                    : 'text-yellow-600 dark:text-yellow-400'
                }`}
              >
                <p className='mb-1 font-semibold'>–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</p>
                <p>
                  ‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:{' '}
                  {isKnowledgeBaseEnabled ? '‚úÖ –≤–∫–ª—é—á–µ–Ω–∞' : '‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞'}
                </p>
                <p>‚Ä¢ backendOrgId: {backendOrgId || '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}</p>
                <p>‚Ä¢ funnelId: {funnelId || '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}</p>
              </div>
            </div>
          )}

          {isFullyEnabled && (
            <>
              {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ */}
              {successMessage && (
                <div className='rounded-lg bg-green-100 p-3 text-sm text-green-700 dark:bg-green-900/30 dark:text-green-300'>
                  {successMessage}
                </div>
              )}

              {error && (
                <div className='rounded-lg bg-red-100 p-3 text-sm text-red-700 dark:bg-red-900/30 dark:text-red-300'>
                  {error}
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
              <Button
                onClick={handleOpenUploadModal}
                disabled={loading}
                className='w-full'
              >
                <Upload className='mr-2 h-4 w-4' />
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
              </Button>

              {/* –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤ */}
              {files.length > 0 ? (
                <div className='rounded-md border'>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ò–º—è —Ñ–∞–π–ª–∞</TableHead>
                        <TableHead>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</TableHead>
                        <TableHead>–†–∞–∑–º–µ—Ä</TableHead>
                        <TableHead className='w-[50px]'></TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {files.map((file) => (
                        <TableRow key={file.id}>
                          <TableCell className='font-medium'>
                            {file.name}
                          </TableCell>
                          <TableCell className='text-muted-foreground text-sm'>
                            {getCategoryLabel(file.category)}
                          </TableCell>
                          <TableCell className='text-muted-foreground text-sm'>
                            {formatFileSize(file.size)}
                          </TableCell>
                          <TableCell>
                            <Button
                              variant='ghost'
                              size='icon'
                              onClick={() =>
                                handleOpenDeleteModal(file.id.toString())
                              }
                              disabled={loading}
                            >
                              <Trash2 className='h-4 w-4 text-red-500' />
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ) : (
                <div className='rounded-lg border border-dashed p-8 text-center'>
                  <p className='text-muted-foreground text-sm'>
                    –§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                  </p>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
      <Dialog open={uploadModalOpen} onOpenChange={setUploadModalOpen}>
        <DialogContent className='max-h-[90vh] overflow-y-auto sm:max-w-[700px]'>
          <DialogHeader>
            <DialogTitle>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</DialogTitle>
          </DialogHeader>

          <div className='grid gap-4 py-4'>
            <div className='grid gap-2'>
              <Label>–§–∞–π–ª *</Label>
              <div className='min-h-[120px]'>
                <FileUploader
                  value={uploadForm.file ? [uploadForm.file] : []}
                  onValueChange={(files) => {
                    if (Array.isArray(files) && files.length > 0) {
                      setUploadForm((prev) => ({
                        ...prev,
                        file: files[0]
                      }));
                    } else {
                      setUploadForm((prev) => ({
                        ...prev,
                        file: null
                      }));
                    }
                  }}
                  accept={{ '*': [] }}
                  maxSize={50 * 1024 * 1024}
                  maxFiles={1}
                />
              </div>
            </div>

            <div className='grid grid-cols-1 gap-4 md:grid-cols-2'>
              <div className='grid gap-2'>
                <Label htmlFor='category'>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                <Select
                  value={uploadForm.category}
                  onValueChange={(value) =>
                    setUploadForm((prev) => ({
                      ...prev,
                      category: value
                    }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' />
                  </SelectTrigger>
                  <SelectContent>
                    {FILE_CATEGORIES.map((cat) => (
                      <SelectItem key={cat.value} value={cat.value}>
                        {cat.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className='grid gap-2'>
                <Label htmlFor='is_public'>–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø</Label>
                <Select
                  value={uploadForm.is_public ? 'true' : 'false'}
                  onValueChange={(value) =>
                    setUploadForm((prev) => ({
                      ...prev,
                      is_public: value === 'true'
                    }))
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='false'>–ù–µ—Ç</SelectItem>
                    <SelectItem value='true'>–î–∞</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className='grid gap-2'>
              <Label htmlFor='description'>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id='description'
                value={uploadForm.description}
                onChange={(e) =>
                  setUploadForm((prev) => ({
                    ...prev,
                    description: e.target.value
                  }))
                }
                placeholder='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞'
                rows={2}
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant='outline' onClick={() => setUploadModalOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              onClick={handleUploadFile}
              disabled={loading || !uploadForm.file}
            >
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ */}
      <Dialog open={deleteModalOpen} onOpenChange={setDeleteModalOpen}>
        <DialogContent className='sm:max-w-[500px]'>
          <DialogHeader>
            <DialogTitle>–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª</DialogTitle>
          </DialogHeader>

          <div className='py-4'>
            <p className='text-muted-foreground text-sm'>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è
              –æ—Ç–º–µ–Ω–∏—Ç—å.
            </p>
          </div>

          <DialogFooter>
            <Button variant='outline' onClick={() => setDeleteModalOpen(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              variant='destructive'
              onClick={handleDeleteFile}
              disabled={loading}
            >
              {loading ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
